
STM32F407DISC_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001658  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080017e0  080017e0  000117e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080017f0  080017f0  000117f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080017f8  080017f8  000117f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080017fc  080017fc  000117fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08001800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          00000094  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000a4  200000a4  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   00006505  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001496  00000000  00000000  00026545  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000018c2  00000000  00000000  000279db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000448  00000000  00000000  000292a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000548  00000000  00000000  000296e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00002185  00000000  00000000  00029c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00001e67  00000000  00000000  0002bdb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0002dc1c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000ad0  00000000  00000000  0002dc98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080017c8 	.word	0x080017c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080017c8 	.word	0x080017c8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 fbcc 	bl	8000c8c <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000504:	f000 fb80 	bl	8000c08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	2000000c 	.word	0x2000000c
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 fb51 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f001 f86c 	bl	8001624 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000064 	.word	0x20000064
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000064 	.word	0x20000064

08000578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
 800057a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff fff6 	bl	800056c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000580:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000582:	bf1c      	itt	ne
 8000584:	4b05      	ldrne	r3, [pc, #20]	; (800059c <HAL_Delay+0x24>)
 8000586:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000588:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800058a:	bf18      	it	ne
 800058c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058e:	f7ff ffed 	bl	800056c <HAL_GetTick>
 8000592:	1b40      	subs	r0, r0, r5
 8000594:	4284      	cmp	r4, r0
 8000596:	d8fa      	bhi.n	800058e <HAL_Delay+0x16>
  {
  }
}
 8000598:	bd38      	pop	{r3, r4, r5, pc}
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80005a0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80005a2:	4604      	mov	r4, r0
 80005a4:	2800      	cmp	r0, #0
 80005a6:	d06e      	beq.n	8000686 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80005a8:	f890 3020 	ldrb.w	r3, [r0, #32]
 80005ac:	b90b      	cbnz	r3, 80005b2 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80005ae:	f001 f859 	bl	8001664 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80005b2:	6822      	ldr	r2, [r4, #0]
 80005b4:	6813      	ldr	r3, [r2, #0]
 80005b6:	f023 0302 	bic.w	r3, r3, #2
 80005ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005bc:	f7ff ffd6 	bl	800056c <HAL_GetTick>
 80005c0:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80005c2:	6823      	ldr	r3, [r4, #0]
 80005c4:	685a      	ldr	r2, [r3, #4]
 80005c6:	0791      	lsls	r1, r2, #30
 80005c8:	d451      	bmi.n	800066e <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	f042 0201 	orr.w	r2, r2, #1
 80005d0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005d2:	f7ff ffcb 	bl	800056c <HAL_GetTick>
 80005d6:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80005d8:	6823      	ldr	r3, [r4, #0]
 80005da:	685a      	ldr	r2, [r3, #4]
 80005dc:	07d2      	lsls	r2, r2, #31
 80005de:	d554      	bpl.n	800068a <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80005e0:	7e22      	ldrb	r2, [r4, #24]
 80005e2:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	bf0c      	ite	eq
 80005e8:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80005ec:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80005f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80005f2:	7e62      	ldrb	r2, [r4, #25]
 80005f4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	bf0c      	ite	eq
 80005fa:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80005fe:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000602:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000604:	7ea2      	ldrb	r2, [r4, #26]
 8000606:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	bf0c      	ite	eq
 800060c:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000610:	f022 0220 	bicne.w	r2, r2, #32
 8000614:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000616:	7ee2      	ldrb	r2, [r4, #27]
 8000618:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	bf0c      	ite	eq
 800061e:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000622:	f042 0210 	orrne.w	r2, r2, #16
 8000626:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000628:	7f22      	ldrb	r2, [r4, #28]
 800062a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	bf0c      	ite	eq
 8000630:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000634:	f022 0208 	bicne.w	r2, r2, #8
 8000638:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800063a:	7f62      	ldrb	r2, [r4, #29]
 800063c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	bf0c      	ite	eq
 8000642:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000646:	f022 0204 	bicne.w	r2, r2, #4
 800064a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800064c:	68e1      	ldr	r1, [r4, #12]
 800064e:	68a2      	ldr	r2, [r4, #8]
 8000650:	430a      	orrs	r2, r1
 8000652:	6921      	ldr	r1, [r4, #16]
 8000654:	430a      	orrs	r2, r1
 8000656:	6961      	ldr	r1, [r4, #20]
 8000658:	430a      	orrs	r2, r1
 800065a:	6861      	ldr	r1, [r4, #4]
 800065c:	3901      	subs	r1, #1
 800065e:	430a      	orrs	r2, r1
 8000660:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000662:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000664:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000666:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000668:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 800066c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800066e:	f7ff ff7d 	bl	800056c <HAL_GetTick>
 8000672:	1b40      	subs	r0, r0, r5
 8000674:	280a      	cmp	r0, #10
 8000676:	d9a4      	bls.n	80005c2 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800067a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067e:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000680:	2305      	movs	r3, #5
 8000682:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000686:	2001      	movs	r0, #1
}
 8000688:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800068a:	f7ff ff6f 	bl	800056c <HAL_GetTick>
 800068e:	1b40      	subs	r0, r0, r5
 8000690:	280a      	cmp	r0, #10
 8000692:	d9a1      	bls.n	80005d8 <HAL_CAN_Init+0x38>
 8000694:	e7f0      	b.n	8000678 <HAL_CAN_Init+0xd8>
	...

08000698 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000698:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800069c:	3b01      	subs	r3, #1
 800069e:	2b01      	cmp	r3, #1
{
 80006a0:	b530      	push	{r4, r5, lr}
  if ((state == HAL_CAN_STATE_READY) ||
 80006a2:	d879      	bhi.n	8000798 <HAL_CAN_ConfigFilter+0x100>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80006a4:	4b3f      	ldr	r3, [pc, #252]	; (80007a4 <HAL_CAN_ConfigFilter+0x10c>)
 80006a6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80006aa:	f042 0201 	orr.w	r2, r2, #1
 80006ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80006b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80006b6:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80006ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80006be:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80006c2:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80006c4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80006c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80006cc:	6948      	ldr	r0, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80006ce:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80006d2:	f000 021f 	and.w	r2, r0, #31
 80006d6:	2401      	movs	r4, #1
 80006d8:	4094      	lsls	r4, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80006da:	43e2      	mvns	r2, r4
 80006dc:	4015      	ands	r5, r2
 80006de:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80006e2:	69cd      	ldr	r5, [r1, #28]
 80006e4:	2d00      	cmp	r5, #0
 80006e6:	d136      	bne.n	8000756 <HAL_CAN_ConfigFilter+0xbe>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80006e8:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 80006ec:	4015      	ands	r5, r2
 80006ee:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 80006f2:	00c0      	lsls	r0, r0, #3

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80006f4:	68cd      	ldr	r5, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80006f6:	888b      	ldrh	r3, [r1, #4]
 80006f8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80006fc:	f500 40c8 	add.w	r0, r0, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000700:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000704:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000708:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800070a:	880b      	ldrh	r3, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800070c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000710:	f8c0 3244 	str.w	r3, [r0, #580]	; 0x244
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000714:	6988      	ldr	r0, [r1, #24]
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <HAL_CAN_ConfigFilter+0x10c>)
 8000718:	2800      	cmp	r0, #0
 800071a:	d135      	bne.n	8000788 <HAL_CAN_ConfigFilter+0xf0>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800071c:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8000720:	4010      	ands	r0, r2
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000722:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000726:	6908      	ldr	r0, [r1, #16]
 8000728:	bb90      	cbnz	r0, 8000790 <HAL_CAN_ConfigFilter+0xf8>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800072a:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800072e:	4002      	ands	r2, r0
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000730:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000734:	6a0b      	ldr	r3, [r1, #32]
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <HAL_CAN_ConfigFilter+0x10c>)
 8000738:	2b01      	cmp	r3, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800073a:	bf02      	ittt	eq
 800073c:	f8d2 321c 	ldreq.w	r3, [r2, #540]	; 0x21c
 8000740:	4323      	orreq	r3, r4
 8000742:	f8c2 321c 	streq.w	r3, [r2, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000746:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800074a:	f023 0301 	bic.w	r3, r3, #1
 800074e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000752:	2000      	movs	r0, #0
 8000754:	bd30      	pop	{r4, r5, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000756:	2d01      	cmp	r5, #1
 8000758:	d1dc      	bne.n	8000714 <HAL_CAN_ConfigFilter+0x7c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800075a:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 800075e:	4325      	orrs	r5, r4
 8000760:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000764:	680b      	ldr	r3, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000766:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000768:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800076c:	00c3      	lsls	r3, r0, #3
 800076e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000772:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000776:	8988      	ldrh	r0, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000778:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800077c:	688d      	ldr	r5, [r1, #8]
 800077e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000782:	f8c3 0244 	str.w	r0, [r3, #580]	; 0x244
 8000786:	e7c5      	b.n	8000714 <HAL_CAN_ConfigFilter+0x7c>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000788:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800078c:	4320      	orrs	r0, r4
 800078e:	e7c8      	b.n	8000722 <HAL_CAN_ConfigFilter+0x8a>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000790:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000794:	4322      	orrs	r2, r4
 8000796:	e7cb      	b.n	8000730 <HAL_CAN_ConfigFilter+0x98>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000798:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800079a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800079e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80007a0:	2001      	movs	r0, #1
  }
}
 80007a2:	bd30      	pop	{r4, r5, pc}
 80007a4:	40006400 	.word	0x40006400

080007a8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80007a8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80007aa:	f890 3020 	ldrb.w	r3, [r0, #32]
 80007ae:	2b01      	cmp	r3, #1
{
 80007b0:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80007b2:	d11f      	bne.n	80007f4 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007b4:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80007b6:	2302      	movs	r3, #2
 80007b8:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007bc:	6813      	ldr	r3, [r2, #0]
 80007be:	f023 0301 	bic.w	r3, r3, #1
 80007c2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80007c4:	f7ff fed2 	bl	800056c <HAL_GetTick>
 80007c8:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80007ca:	6823      	ldr	r3, [r4, #0]
 80007cc:	6858      	ldr	r0, [r3, #4]
 80007ce:	f010 0001 	ands.w	r0, r0, #1
 80007d2:	d101      	bne.n	80007d8 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007d4:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80007d6:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007d8:	f7ff fec8 	bl	800056c <HAL_GetTick>
 80007dc:	1b40      	subs	r0, r0, r5
 80007de:	280a      	cmp	r0, #10
 80007e0:	d9f3      	bls.n	80007ca <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e8:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80007ea:	2305      	movs	r3, #5
 80007ec:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 80007f0:	2001      	movs	r0, #1
  }
}
 80007f2:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80007f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80007f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007fa:	6243      	str	r3, [r0, #36]	; 0x24
 80007fc:	e7f8      	b.n	80007f0 <HAL_CAN_Start+0x48>

080007fe <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80007fe:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000800:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000804:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000806:	3d01      	subs	r5, #1
 8000808:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800080a:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800080c:	d840      	bhi.n	8000890 <HAL_CAN_AddTxMessage+0x92>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800080e:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000812:	d039      	beq.n	8000888 <HAL_CAN_AddTxMessage+0x8a>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000814:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000818:	2c03      	cmp	r4, #3
 800081a:	f04f 0501 	mov.w	r5, #1
 800081e:	d105      	bne.n	800082c <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000820:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000822:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000826:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000828:	2001      	movs	r0, #1
  }
}
 800082a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800082c:	40a5      	lsls	r5, r4
 800082e:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8000830:	6888      	ldr	r0, [r1, #8]
 8000832:	68cf      	ldr	r7, [r1, #12]
 8000834:	f104 0318 	add.w	r3, r4, #24
 8000838:	bb08      	cbnz	r0, 800087e <HAL_CAN_AddTxMessage+0x80>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800083a:	6808      	ldr	r0, [r1, #0]
 800083c:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000840:	011b      	lsls	r3, r3, #4
 8000842:	0124      	lsls	r4, r4, #4
 8000844:	50f0      	str	r0, [r6, r3]
 8000846:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000848:	6908      	ldr	r0, [r1, #16]
      if (pHeader->TransmitGlobalTime == ENABLE)
 800084a:	7d09      	ldrb	r1, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800084c:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000850:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000852:	bf02      	ittt	eq
 8000854:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8000858:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 800085c:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000860:	4434      	add	r4, r6
 8000862:	6851      	ldr	r1, [r2, #4]
 8000864:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000868:	6812      	ldr	r2, [r2, #0]
 800086a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800086e:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000872:	f042 0201 	orr.w	r2, r2, #1
 8000876:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 800087a:	2000      	movs	r0, #0
 800087c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800087e:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8000880:	4338      	orrs	r0, r7
 8000882:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8000886:	e7db      	b.n	8000840 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000888:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800088a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800088e:	e7ca      	b.n	8000826 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000890:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000892:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000896:	e7c6      	b.n	8000826 <HAL_CAN_AddTxMessage+0x28>

08000898 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000898:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800089c:	3b01      	subs	r3, #1
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d80c      	bhi.n	80008bc <HAL_CAN_GetTxMailboxesFreeLevel+0x24>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80008a2:	6803      	ldr	r3, [r0, #0]
 80008a4:	6898      	ldr	r0, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80008a6:	689a      	ldr	r2, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80008a8:	689b      	ldr	r3, [r3, #8]
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80008aa:	0112      	lsls	r2, r2, #4
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80008ac:	f3c0 6080 	ubfx	r0, r0, #26, #1
      freelevel++;
 80008b0:	bf48      	it	mi
 80008b2:	3001      	addmi	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80008b4:	00db      	lsls	r3, r3, #3
 80008b6:	d502      	bpl.n	80008be <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
    {
      freelevel++;
 80008b8:	3001      	adds	r0, #1
 80008ba:	4770      	bx	lr
  uint32_t freelevel = 0U;
 80008bc:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 80008be:	4770      	bx	lr

080008c0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80008c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 80008c2:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80008c6:	3c01      	subs	r4, #1
 80008c8:	2c01      	cmp	r4, #1
 80008ca:	d86b      	bhi.n	80009a4 <HAL_CAN_GetRxMessage+0xe4>
 80008cc:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80008ce:	b941      	cbnz	r1, 80008e2 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80008d0:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80008d2:	07a4      	lsls	r4, r4, #30
 80008d4:	d107      	bne.n	80008e6 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80008d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80008d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80008dc:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80008de:	2001      	movs	r0, #1
  }
}
 80008e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80008e2:	6934      	ldr	r4, [r6, #16]
 80008e4:	e7f5      	b.n	80008d2 <HAL_CAN_GetRxMessage+0x12>
 80008e6:	010c      	lsls	r4, r1, #4
 80008e8:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80008ea:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80008ee:	f007 0704 	and.w	r7, r7, #4
 80008f2:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80008f4:	2f00      	cmp	r7, #0
 80008f6:	d14b      	bne.n	8000990 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80008f8:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80008fc:	0d7f      	lsrs	r7, r7, #21
 80008fe:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000900:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000904:	f007 0702 	and.w	r7, r7, #2
 8000908:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800090a:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 800090e:	f007 070f 	and.w	r7, r7, #15
 8000912:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000914:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000918:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800091c:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800091e:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000922:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000924:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000926:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000928:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 800092c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800092e:	6802      	ldr	r2, [r0, #0]
 8000930:	4422      	add	r2, r4
 8000932:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000936:	0a12      	lsrs	r2, r2, #8
 8000938:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800093a:	6802      	ldr	r2, [r0, #0]
 800093c:	4422      	add	r2, r4
 800093e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000942:	0c12      	lsrs	r2, r2, #16
 8000944:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000946:	6802      	ldr	r2, [r0, #0]
 8000948:	4422      	add	r2, r4
 800094a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800094e:	0e12      	lsrs	r2, r2, #24
 8000950:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000952:	6802      	ldr	r2, [r0, #0]
 8000954:	4422      	add	r2, r4
 8000956:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800095a:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800095c:	6802      	ldr	r2, [r0, #0]
 800095e:	4422      	add	r2, r4
 8000960:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000964:	0a12      	lsrs	r2, r2, #8
 8000966:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000968:	6802      	ldr	r2, [r0, #0]
 800096a:	4422      	add	r2, r4
 800096c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000970:	0c12      	lsrs	r2, r2, #16
 8000972:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000974:	6802      	ldr	r2, [r0, #0]
 8000976:	4414      	add	r4, r2
 8000978:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 800097c:	0e12      	lsrs	r2, r2, #24
 800097e:	71da      	strb	r2, [r3, #7]
 8000980:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000982:	b951      	cbnz	r1, 800099a <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000984:	68da      	ldr	r2, [r3, #12]
 8000986:	f042 0220 	orr.w	r2, r2, #32
 800098a:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 800098c:	2000      	movs	r0, #0
 800098e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000990:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000994:	08ff      	lsrs	r7, r7, #3
 8000996:	6057      	str	r7, [r2, #4]
 8000998:	e7b2      	b.n	8000900 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800099a:	691a      	ldr	r2, [r3, #16]
 800099c:	f042 0220 	orr.w	r2, r2, #32
 80009a0:	611a      	str	r2, [r3, #16]
 80009a2:	e7f3      	b.n	800098c <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80009a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009aa:	e797      	b.n	80008dc <HAL_CAN_GetRxMessage+0x1c>

080009ac <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80009ac:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80009b0:	3b01      	subs	r3, #1
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d805      	bhi.n	80009c2 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80009b6:	6802      	ldr	r2, [r0, #0]
 80009b8:	6953      	ldr	r3, [r2, #20]
 80009ba:	4319      	orrs	r1, r3
 80009bc:	6151      	str	r1, [r2, #20]

    /* Return function status */
    return HAL_OK;
 80009be:	2000      	movs	r0, #0
 80009c0:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80009c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80009ca:	2001      	movs	r0, #1
  }
}
 80009cc:	4770      	bx	lr

080009ce <HAL_CAN_TxMailbox0CompleteCallback>:
 80009ce:	4770      	bx	lr

080009d0 <HAL_CAN_TxMailbox1CompleteCallback>:
 80009d0:	4770      	bx	lr

080009d2 <HAL_CAN_TxMailbox2CompleteCallback>:
 80009d2:	4770      	bx	lr

080009d4 <HAL_CAN_TxMailbox0AbortCallback>:
 80009d4:	4770      	bx	lr

080009d6 <HAL_CAN_TxMailbox1AbortCallback>:
 80009d6:	4770      	bx	lr

080009d8 <HAL_CAN_TxMailbox2AbortCallback>:
 80009d8:	4770      	bx	lr

080009da <HAL_CAN_RxFifo0FullCallback>:
 80009da:	4770      	bx	lr

080009dc <HAL_CAN_RxFifo1MsgPendingCallback>:
 80009dc:	4770      	bx	lr

080009de <HAL_CAN_RxFifo1FullCallback>:
 80009de:	4770      	bx	lr

080009e0 <HAL_CAN_SleepCallback>:
 80009e0:	4770      	bx	lr

080009e2 <HAL_CAN_WakeUpFromRxMsgCallback>:
 80009e2:	4770      	bx	lr

080009e4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80009e4:	4770      	bx	lr

080009e6 <HAL_CAN_IRQHandler>:
{
 80009e6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80009ea:	6803      	ldr	r3, [r0, #0]
 80009ec:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80009ee:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80009f2:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80009f4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80009f8:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80009fc:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000a00:	f016 0401 	ands.w	r4, r6, #1
{
 8000a04:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000a06:	d022      	beq.n	8000a4e <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000a08:	f017 0401 	ands.w	r4, r7, #1
 8000a0c:	d007      	beq.n	8000a1e <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000a0e:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000a10:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000a12:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000a14:	f140 80a3 	bpl.w	8000b5e <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000a18:	f7ff ffd9 	bl	80009ce <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000a1c:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000a1e:	05fb      	lsls	r3, r7, #23
 8000a20:	d509      	bpl.n	8000a36 <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000a22:	682b      	ldr	r3, [r5, #0]
 8000a24:	f44f 7280 	mov.w	r2, #256	; 0x100
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000a28:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000a2a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000a2c:	f140 80a5 	bpl.w	8000b7a <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000a30:	4628      	mov	r0, r5
 8000a32:	f7ff ffcd 	bl	80009d0 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000a36:	03fb      	lsls	r3, r7, #15
 8000a38:	d509      	bpl.n	8000a4e <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000a3a:	682b      	ldr	r3, [r5, #0]
 8000a3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000a40:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000a42:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000a44:	f140 80a7 	bpl.w	8000b96 <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000a48:	4628      	mov	r0, r5
 8000a4a:	f7ff ffc2 	bl	80009d2 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000a4e:	0733      	lsls	r3, r6, #28
 8000a50:	d507      	bpl.n	8000a62 <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000a52:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000a56:	bf1f      	itttt	ne
 8000a58:	682b      	ldrne	r3, [r5, #0]
 8000a5a:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000a5c:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000a60:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000a62:	0777      	lsls	r7, r6, #29
 8000a64:	d508      	bpl.n	8000a78 <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000a66:	f01b 0f08 	tst.w	fp, #8
 8000a6a:	d005      	beq.n	8000a78 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000a6c:	682b      	ldr	r3, [r5, #0]
 8000a6e:	2208      	movs	r2, #8
 8000a70:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000a72:	4628      	mov	r0, r5
 8000a74:	f7ff ffb1 	bl	80009da <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000a78:	07b0      	lsls	r0, r6, #30
 8000a7a:	d506      	bpl.n	8000a8a <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000a7c:	682b      	ldr	r3, [r5, #0]
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0799      	lsls	r1, r3, #30
 8000a82:	d002      	beq.n	8000a8a <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000a84:	4628      	mov	r0, r5
 8000a86:	f000 fdaf 	bl	80015e8 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000a8a:	0672      	lsls	r2, r6, #25
 8000a8c:	d507      	bpl.n	8000a9e <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000a8e:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000a92:	bf1f      	itttt	ne
 8000a94:	682b      	ldrne	r3, [r5, #0]
 8000a96:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000a98:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000a9c:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000a9e:	06b3      	lsls	r3, r6, #26
 8000aa0:	d508      	bpl.n	8000ab4 <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000aa2:	f01a 0f08 	tst.w	sl, #8
 8000aa6:	d005      	beq.n	8000ab4 <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000aa8:	682b      	ldr	r3, [r5, #0]
 8000aaa:	2208      	movs	r2, #8
 8000aac:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000aae:	4628      	mov	r0, r5
 8000ab0:	f7ff ff95 	bl	80009de <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000ab4:	06f7      	lsls	r7, r6, #27
 8000ab6:	d506      	bpl.n	8000ac6 <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000ab8:	682b      	ldr	r3, [r5, #0]
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	0798      	lsls	r0, r3, #30
 8000abe:	d002      	beq.n	8000ac6 <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	f7ff ff8b 	bl	80009dc <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000ac6:	03b1      	lsls	r1, r6, #14
 8000ac8:	d508      	bpl.n	8000adc <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000aca:	f019 0f10 	tst.w	r9, #16
 8000ace:	d005      	beq.n	8000adc <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000ad0:	682b      	ldr	r3, [r5, #0]
 8000ad2:	2210      	movs	r2, #16
 8000ad4:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000ad6:	4628      	mov	r0, r5
 8000ad8:	f7ff ff82 	bl	80009e0 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000adc:	03f2      	lsls	r2, r6, #15
 8000ade:	d508      	bpl.n	8000af2 <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000ae0:	f019 0f08 	tst.w	r9, #8
 8000ae4:	d005      	beq.n	8000af2 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000ae6:	682b      	ldr	r3, [r5, #0]
 8000ae8:	2208      	movs	r2, #8
 8000aea:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000aec:	4628      	mov	r0, r5
 8000aee:	f7ff ff78 	bl	80009e2 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000af2:	0433      	lsls	r3, r6, #16
 8000af4:	d52a      	bpl.n	8000b4c <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000af6:	f019 0f04 	tst.w	r9, #4
 8000afa:	682a      	ldr	r2, [r5, #0]
 8000afc:	d024      	beq.n	8000b48 <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000afe:	05f7      	lsls	r7, r6, #23
 8000b00:	d504      	bpl.n	8000b0c <HAL_CAN_IRQHandler+0x126>
 8000b02:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8000b06:	bf18      	it	ne
 8000b08:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000b0c:	05b0      	lsls	r0, r6, #22
 8000b0e:	d504      	bpl.n	8000b1a <HAL_CAN_IRQHandler+0x134>
 8000b10:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8000b14:	bf18      	it	ne
 8000b16:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000b1a:	0571      	lsls	r1, r6, #21
 8000b1c:	d504      	bpl.n	8000b28 <HAL_CAN_IRQHandler+0x142>
 8000b1e:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8000b22:	bf18      	it	ne
 8000b24:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000b28:	0533      	lsls	r3, r6, #20
 8000b2a:	d50d      	bpl.n	8000b48 <HAL_CAN_IRQHandler+0x162>
 8000b2c:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8000b30:	d00a      	beq.n	8000b48 <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 8000b32:	2b30      	cmp	r3, #48	; 0x30
 8000b34:	d04c      	beq.n	8000bd0 <HAL_CAN_IRQHandler+0x1ea>
 8000b36:	d83c      	bhi.n	8000bb2 <HAL_CAN_IRQHandler+0x1cc>
 8000b38:	2b10      	cmp	r3, #16
 8000b3a:	d043      	beq.n	8000bc4 <HAL_CAN_IRQHandler+0x1de>
 8000b3c:	2b20      	cmp	r3, #32
 8000b3e:	d044      	beq.n	8000bca <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000b40:	6993      	ldr	r3, [r2, #24]
 8000b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b46:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000b48:	2304      	movs	r3, #4
 8000b4a:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000b4c:	b12c      	cbz	r4, 8000b5a <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 8000b4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000b50:	431c      	orrs	r4, r3
 8000b52:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000b54:	4628      	mov	r0, r5
 8000b56:	f7ff ff45 	bl	80009e4 <HAL_CAN_ErrorCallback>
 8000b5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000b5e:	077a      	lsls	r2, r7, #29
 8000b60:	d405      	bmi.n	8000b6e <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000b62:	f017 0408 	ands.w	r4, r7, #8
 8000b66:	d105      	bne.n	8000b74 <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000b68:	f7ff ff34 	bl	80009d4 <HAL_CAN_TxMailbox0AbortCallback>
 8000b6c:	e757      	b.n	8000a1e <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000b6e:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000b72:	e754      	b.n	8000a1e <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000b74:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000b78:	e751      	b.n	8000a1e <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000b7a:	0579      	lsls	r1, r7, #21
 8000b7c:	d502      	bpl.n	8000b84 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000b7e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000b82:	e758      	b.n	8000a36 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000b84:	053a      	lsls	r2, r7, #20
 8000b86:	d502      	bpl.n	8000b8e <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000b88:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000b8c:	e753      	b.n	8000a36 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000b8e:	4628      	mov	r0, r5
 8000b90:	f7ff ff21 	bl	80009d6 <HAL_CAN_TxMailbox1AbortCallback>
 8000b94:	e74f      	b.n	8000a36 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000b96:	0379      	lsls	r1, r7, #13
 8000b98:	d502      	bpl.n	8000ba0 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000b9a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000b9e:	e756      	b.n	8000a4e <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000ba0:	033a      	lsls	r2, r7, #12
 8000ba2:	d502      	bpl.n	8000baa <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000ba4:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8000ba8:	e751      	b.n	8000a4e <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000baa:	4628      	mov	r0, r5
 8000bac:	f7ff ff14 	bl	80009d8 <HAL_CAN_TxMailbox2AbortCallback>
 8000bb0:	e74d      	b.n	8000a4e <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000bb2:	2b50      	cmp	r3, #80	; 0x50
 8000bb4:	d00f      	beq.n	8000bd6 <HAL_CAN_IRQHandler+0x1f0>
 8000bb6:	2b60      	cmp	r3, #96	; 0x60
 8000bb8:	d010      	beq.n	8000bdc <HAL_CAN_IRQHandler+0x1f6>
 8000bba:	2b40      	cmp	r3, #64	; 0x40
 8000bbc:	d1c0      	bne.n	8000b40 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000bbe:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000bc2:	e7bd      	b.n	8000b40 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000bc4:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000bc8:	e7ba      	b.n	8000b40 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000bca:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000bce:	e7b7      	b.n	8000b40 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000bd0:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000bd4:	e7b4      	b.n	8000b40 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000bd6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8000bda:	e7b1      	b.n	8000b40 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000bdc:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000be0:	e7ae      	b.n	8000b40 <HAL_CAN_IRQHandler+0x15a>
	...

08000be4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000be6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bec:	041b      	lsls	r3, r3, #16
 8000bee:	0c1b      	lsrs	r3, r3, #16
 8000bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	0200      	lsls	r0, r0, #8
 8000bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000bfe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c00:	60d3      	str	r3, [r2, #12]
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0a:	b530      	push	{r4, r5, lr}
 8000c0c:	68dc      	ldr	r4, [r3, #12]
 8000c0e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c12:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c18:	2b04      	cmp	r3, #4
 8000c1a:	bf28      	it	cs
 8000c1c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 0501 	mov.w	r5, #1
 8000c24:	fa05 f303 	lsl.w	r3, r5, r3
 8000c28:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2c:	bf8c      	ite	hi
 8000c2e:	3c03      	subhi	r4, #3
 8000c30:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c32:	4019      	ands	r1, r3
 8000c34:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c36:	fa05 f404 	lsl.w	r4, r5, r4
 8000c3a:	3c01      	subs	r4, #1
 8000c3c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	ea42 0201 	orr.w	r2, r2, r1
 8000c44:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	bfad      	iteet	ge
 8000c4a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	f000 000f 	andlt.w	r0, r0, #15
 8000c52:	4b06      	ldrlt	r3, [pc, #24]	; (8000c6c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	bfb5      	itete	lt
 8000c5a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000c64:	bd30      	pop	{r4, r5, pc}
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00
 8000c6c:	e000ed14 	.word	0xe000ed14

08000c70 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c70:	2800      	cmp	r0, #0
 8000c72:	db08      	blt.n	8000c86 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c74:	0942      	lsrs	r2, r0, #5
 8000c76:	2301      	movs	r3, #1
 8000c78:	f000 001f 	and.w	r0, r0, #31
 8000c7c:	fa03 f000 	lsl.w	r0, r3, r0
 8000c80:	4b01      	ldr	r3, [pc, #4]	; (8000c88 <HAL_NVIC_EnableIRQ+0x18>)
 8000c82:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c86:	4770      	bx	lr
 8000c88:	e000e100 	.word	0xe000e100

08000c8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c8c:	3801      	subs	r0, #1
 8000c8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c92:	d20a      	bcs.n	8000caa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c98:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	21f0      	movs	r1, #240	; 0xf0
 8000c9c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000caa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e010 	.word	0xe000e010
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cbc:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cbe:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000e70 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cc4:	4a68      	ldr	r2, [pc, #416]	; (8000e68 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cc6:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000e74 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cca:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ccc:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000cce:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd0:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000cd2:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd4:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000cd6:	42ac      	cmp	r4, r5
 8000cd8:	f040 80b0 	bne.w	8000e3c <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cdc:	684c      	ldr	r4, [r1, #4]
 8000cde:	f024 0c10 	bic.w	ip, r4, #16
 8000ce2:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
 8000ce6:	2e01      	cmp	r6, #1
 8000ce8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000cec:	d812      	bhi.n	8000d14 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000cee:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf0:	2603      	movs	r6, #3
 8000cf2:	fa06 f60e 	lsl.w	r6, r6, lr
 8000cf6:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cfa:	68ce      	ldr	r6, [r1, #12]
 8000cfc:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d00:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000d02:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d04:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d06:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d0a:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d0e:	409e      	lsls	r6, r3
 8000d10:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000d12:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d14:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000d16:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d18:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d1c:	43f6      	mvns	r6, r6
 8000d1e:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d22:	688f      	ldr	r7, [r1, #8]
 8000d24:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d28:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d2c:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000d30:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d32:	d116      	bne.n	8000d62 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000d34:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000d38:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d3c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000d40:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d44:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000d48:	f04f 0c0f 	mov.w	ip, #15
 8000d4c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000d50:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d54:	690f      	ldr	r7, [r1, #16]
 8000d56:	fa07 f70b 	lsl.w	r7, r7, fp
 8000d5a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000d5e:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000d62:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d64:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d66:	f004 0703 	and.w	r7, r4, #3
 8000d6a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000d6e:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000d72:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d74:	00e6      	lsls	r6, r4, #3
 8000d76:	d561      	bpl.n	8000e3c <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d78:	f04f 0b00 	mov.w	fp, #0
 8000d7c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000d80:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d84:	4e39      	ldr	r6, [pc, #228]	; (8000e6c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000d8a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000d8e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000d92:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000d96:	9703      	str	r7, [sp, #12]
 8000d98:	9f03      	ldr	r7, [sp, #12]
 8000d9a:	f023 0703 	bic.w	r7, r3, #3
 8000d9e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000da2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000da6:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000daa:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dae:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000db2:	f04f 0e0f 	mov.w	lr, #15
 8000db6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dba:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dbc:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dc0:	d043      	beq.n	8000e4a <HAL_GPIO_Init+0x192>
 8000dc2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000dc6:	42b0      	cmp	r0, r6
 8000dc8:	d041      	beq.n	8000e4e <HAL_GPIO_Init+0x196>
 8000dca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000dce:	42b0      	cmp	r0, r6
 8000dd0:	d03f      	beq.n	8000e52 <HAL_GPIO_Init+0x19a>
 8000dd2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000dd6:	42b0      	cmp	r0, r6
 8000dd8:	d03d      	beq.n	8000e56 <HAL_GPIO_Init+0x19e>
 8000dda:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000dde:	42b0      	cmp	r0, r6
 8000de0:	d03b      	beq.n	8000e5a <HAL_GPIO_Init+0x1a2>
 8000de2:	4548      	cmp	r0, r9
 8000de4:	d03b      	beq.n	8000e5e <HAL_GPIO_Init+0x1a6>
 8000de6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000dea:	42b0      	cmp	r0, r6
 8000dec:	d039      	beq.n	8000e62 <HAL_GPIO_Init+0x1aa>
 8000dee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000df2:	42b0      	cmp	r0, r6
 8000df4:	bf14      	ite	ne
 8000df6:	2608      	movne	r6, #8
 8000df8:	2607      	moveq	r6, #7
 8000dfa:	fa06 f60c 	lsl.w	r6, r6, ip
 8000dfe:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e02:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000e04:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e06:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e08:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000e0c:	bf0c      	ite	eq
 8000e0e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000e10:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000e12:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000e14:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e16:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000e1a:	bf0c      	ite	eq
 8000e1c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000e1e:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000e20:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e22:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e24:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000e28:	bf0c      	ite	eq
 8000e2a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000e2c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000e2e:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000e30:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e32:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000e34:	bf54      	ite	pl
 8000e36:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000e38:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000e3a:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	2b10      	cmp	r3, #16
 8000e40:	f47f af45 	bne.w	8000cce <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000e44:	b005      	add	sp, #20
 8000e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e4a:	465e      	mov	r6, fp
 8000e4c:	e7d5      	b.n	8000dfa <HAL_GPIO_Init+0x142>
 8000e4e:	2601      	movs	r6, #1
 8000e50:	e7d3      	b.n	8000dfa <HAL_GPIO_Init+0x142>
 8000e52:	2602      	movs	r6, #2
 8000e54:	e7d1      	b.n	8000dfa <HAL_GPIO_Init+0x142>
 8000e56:	2603      	movs	r6, #3
 8000e58:	e7cf      	b.n	8000dfa <HAL_GPIO_Init+0x142>
 8000e5a:	2604      	movs	r6, #4
 8000e5c:	e7cd      	b.n	8000dfa <HAL_GPIO_Init+0x142>
 8000e5e:	2605      	movs	r6, #5
 8000e60:	e7cb      	b.n	8000dfa <HAL_GPIO_Init+0x142>
 8000e62:	2606      	movs	r6, #6
 8000e64:	e7c9      	b.n	8000dfa <HAL_GPIO_Init+0x142>
 8000e66:	bf00      	nop
 8000e68:	40013c00 	.word	0x40013c00
 8000e6c:	40020000 	.word	0x40020000
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40021400 	.word	0x40021400

08000e78 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e78:	6903      	ldr	r3, [r0, #16]
 8000e7a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000e7c:	bf14      	ite	ne
 8000e7e:	2001      	movne	r0, #1
 8000e80:	2000      	moveq	r0, #0
 8000e82:	4770      	bx	lr

08000e84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e84:	b10a      	cbz	r2, 8000e8a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e86:	6181      	str	r1, [r0, #24]
 8000e88:	4770      	bx	lr
 8000e8a:	0409      	lsls	r1, r1, #16
 8000e8c:	e7fb      	b.n	8000e86 <HAL_GPIO_WritePin+0x2>
	...

08000e90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e94:	4604      	mov	r4, r0
 8000e96:	b908      	cbnz	r0, 8000e9c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000e98:	2001      	movs	r0, #1
 8000e9a:	e03f      	b.n	8000f1c <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9c:	6803      	ldr	r3, [r0, #0]
 8000e9e:	07dd      	lsls	r5, r3, #31
 8000ea0:	d410      	bmi.n	8000ec4 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ea2:	6823      	ldr	r3, [r4, #0]
 8000ea4:	0798      	lsls	r0, r3, #30
 8000ea6:	d45a      	bmi.n	8000f5e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	071a      	lsls	r2, r3, #28
 8000eac:	f100 809c 	bmi.w	8000fe8 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eb0:	6823      	ldr	r3, [r4, #0]
 8000eb2:	075b      	lsls	r3, r3, #29
 8000eb4:	f100 80ba 	bmi.w	800102c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eb8:	69a0      	ldr	r0, [r4, #24]
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	f040 811b 	bne.w	80010f6 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	e02b      	b.n	8000f1c <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ec4:	4ba4      	ldr	r3, [pc, #656]	; (8001158 <HAL_RCC_OscConfig+0x2c8>)
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	f002 020c 	and.w	r2, r2, #12
 8000ecc:	2a04      	cmp	r2, #4
 8000ece:	d007      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ed6:	2a08      	cmp	r2, #8
 8000ed8:	d10a      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	0259      	lsls	r1, r3, #9
 8000ede:	d507      	bpl.n	8000ef0 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee0:	4b9d      	ldr	r3, [pc, #628]	; (8001158 <HAL_RCC_OscConfig+0x2c8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	039a      	lsls	r2, r3, #14
 8000ee6:	d5dc      	bpl.n	8000ea2 <HAL_RCC_OscConfig+0x12>
 8000ee8:	6863      	ldr	r3, [r4, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1d9      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x12>
 8000eee:	e7d3      	b.n	8000e98 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef0:	6863      	ldr	r3, [r4, #4]
 8000ef2:	4d99      	ldr	r5, [pc, #612]	; (8001158 <HAL_RCC_OscConfig+0x2c8>)
 8000ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef8:	d113      	bne.n	8000f22 <HAL_RCC_OscConfig+0x92>
 8000efa:	682b      	ldr	r3, [r5, #0]
 8000efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f00:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f02:	f7ff fb33 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f06:	4d94      	ldr	r5, [pc, #592]	; (8001158 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000f08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f0a:	682b      	ldr	r3, [r5, #0]
 8000f0c:	039b      	lsls	r3, r3, #14
 8000f0e:	d4c8      	bmi.n	8000ea2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f10:	f7ff fb2c 	bl	800056c <HAL_GetTick>
 8000f14:	1b80      	subs	r0, r0, r6
 8000f16:	2864      	cmp	r0, #100	; 0x64
 8000f18:	d9f7      	bls.n	8000f0a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000f1a:	2003      	movs	r0, #3
}
 8000f1c:	b002      	add	sp, #8
 8000f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f26:	d104      	bne.n	8000f32 <HAL_RCC_OscConfig+0xa2>
 8000f28:	682b      	ldr	r3, [r5, #0]
 8000f2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f2e:	602b      	str	r3, [r5, #0]
 8000f30:	e7e3      	b.n	8000efa <HAL_RCC_OscConfig+0x6a>
 8000f32:	682a      	ldr	r2, [r5, #0]
 8000f34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f38:	602a      	str	r2, [r5, #0]
 8000f3a:	682a      	ldr	r2, [r5, #0]
 8000f3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f40:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1dd      	bne.n	8000f02 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000f46:	f7ff fb11 	bl	800056c <HAL_GetTick>
 8000f4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f4c:	682b      	ldr	r3, [r5, #0]
 8000f4e:	039f      	lsls	r7, r3, #14
 8000f50:	d5a7      	bpl.n	8000ea2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f52:	f7ff fb0b 	bl	800056c <HAL_GetTick>
 8000f56:	1b80      	subs	r0, r0, r6
 8000f58:	2864      	cmp	r0, #100	; 0x64
 8000f5a:	d9f7      	bls.n	8000f4c <HAL_RCC_OscConfig+0xbc>
 8000f5c:	e7dd      	b.n	8000f1a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f5e:	4b7e      	ldr	r3, [pc, #504]	; (8001158 <HAL_RCC_OscConfig+0x2c8>)
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	f012 0f0c 	tst.w	r2, #12
 8000f66:	d007      	beq.n	8000f78 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f6e:	2a08      	cmp	r2, #8
 8000f70:	d111      	bne.n	8000f96 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	025e      	lsls	r6, r3, #9
 8000f76:	d40e      	bmi.n	8000f96 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f78:	4b77      	ldr	r3, [pc, #476]	; (8001158 <HAL_RCC_OscConfig+0x2c8>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	0795      	lsls	r5, r2, #30
 8000f7e:	d502      	bpl.n	8000f86 <HAL_RCC_OscConfig+0xf6>
 8000f80:	68e2      	ldr	r2, [r4, #12]
 8000f82:	2a01      	cmp	r2, #1
 8000f84:	d188      	bne.n	8000e98 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	6921      	ldr	r1, [r4, #16]
 8000f8a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000f8e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000f92:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f94:	e788      	b.n	8000ea8 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f96:	68e2      	ldr	r2, [r4, #12]
 8000f98:	4b70      	ldr	r3, [pc, #448]	; (800115c <HAL_RCC_OscConfig+0x2cc>)
 8000f9a:	b1b2      	cbz	r2, 8000fca <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fae4 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa4:	4d6c      	ldr	r5, [pc, #432]	; (8001158 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000fa6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa8:	682b      	ldr	r3, [r5, #0]
 8000faa:	0798      	lsls	r0, r3, #30
 8000fac:	d507      	bpl.n	8000fbe <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fae:	682b      	ldr	r3, [r5, #0]
 8000fb0:	6922      	ldr	r2, [r4, #16]
 8000fb2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000fb6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000fba:	602b      	str	r3, [r5, #0]
 8000fbc:	e774      	b.n	8000ea8 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fbe:	f7ff fad5 	bl	800056c <HAL_GetTick>
 8000fc2:	1b80      	subs	r0, r0, r6
 8000fc4:	2802      	cmp	r0, #2
 8000fc6:	d9ef      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x118>
 8000fc8:	e7a7      	b.n	8000f1a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000fca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fcc:	f7ff face 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fd0:	4d61      	ldr	r5, [pc, #388]	; (8001158 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000fd2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fd4:	682b      	ldr	r3, [r5, #0]
 8000fd6:	0799      	lsls	r1, r3, #30
 8000fd8:	f57f af66 	bpl.w	8000ea8 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fdc:	f7ff fac6 	bl	800056c <HAL_GetTick>
 8000fe0:	1b80      	subs	r0, r0, r6
 8000fe2:	2802      	cmp	r0, #2
 8000fe4:	d9f6      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x144>
 8000fe6:	e798      	b.n	8000f1a <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000fe8:	6962      	ldr	r2, [r4, #20]
 8000fea:	4b5d      	ldr	r3, [pc, #372]	; (8001160 <HAL_RCC_OscConfig+0x2d0>)
 8000fec:	b17a      	cbz	r2, 800100e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000fee:	2201      	movs	r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ff2:	f7ff fabb 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff6:	4d58      	ldr	r5, [pc, #352]	; (8001158 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000ff8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ffa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ffc:	079f      	lsls	r7, r3, #30
 8000ffe:	f53f af57 	bmi.w	8000eb0 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001002:	f7ff fab3 	bl	800056c <HAL_GetTick>
 8001006:	1b80      	subs	r0, r0, r6
 8001008:	2802      	cmp	r0, #2
 800100a:	d9f6      	bls.n	8000ffa <HAL_RCC_OscConfig+0x16a>
 800100c:	e785      	b.n	8000f1a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800100e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001010:	f7ff faac 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001014:	4d50      	ldr	r5, [pc, #320]	; (8001158 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001016:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001018:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800101a:	0798      	lsls	r0, r3, #30
 800101c:	f57f af48 	bpl.w	8000eb0 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001020:	f7ff faa4 	bl	800056c <HAL_GetTick>
 8001024:	1b80      	subs	r0, r0, r6
 8001026:	2802      	cmp	r0, #2
 8001028:	d9f6      	bls.n	8001018 <HAL_RCC_OscConfig+0x188>
 800102a:	e776      	b.n	8000f1a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800102c:	4b4a      	ldr	r3, [pc, #296]	; (8001158 <HAL_RCC_OscConfig+0x2c8>)
 800102e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001030:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001034:	d128      	bne.n	8001088 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	9201      	str	r2, [sp, #4]
 8001038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800103a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800103e:	641a      	str	r2, [r3, #64]	; 0x40
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800104a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800104c:	4d45      	ldr	r5, [pc, #276]	; (8001164 <HAL_RCC_OscConfig+0x2d4>)
 800104e:	682b      	ldr	r3, [r5, #0]
 8001050:	05d9      	lsls	r1, r3, #23
 8001052:	d51b      	bpl.n	800108c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001054:	68a3      	ldr	r3, [r4, #8]
 8001056:	4d40      	ldr	r5, [pc, #256]	; (8001158 <HAL_RCC_OscConfig+0x2c8>)
 8001058:	2b01      	cmp	r3, #1
 800105a:	d127      	bne.n	80010ac <HAL_RCC_OscConfig+0x21c>
 800105c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001064:	f7ff fa82 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001068:	4d3b      	ldr	r5, [pc, #236]	; (8001158 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800106a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800106c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001070:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001072:	079b      	lsls	r3, r3, #30
 8001074:	d539      	bpl.n	80010ea <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001076:	2e00      	cmp	r6, #0
 8001078:	f43f af1e 	beq.w	8000eb8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800107c:	4a36      	ldr	r2, [pc, #216]	; (8001158 <HAL_RCC_OscConfig+0x2c8>)
 800107e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	e717      	b.n	8000eb8 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001088:	2600      	movs	r6, #0
 800108a:	e7df      	b.n	800104c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800108c:	682b      	ldr	r3, [r5, #0]
 800108e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001092:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001094:	f7ff fa6a 	bl	800056c <HAL_GetTick>
 8001098:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109a:	682b      	ldr	r3, [r5, #0]
 800109c:	05da      	lsls	r2, r3, #23
 800109e:	d4d9      	bmi.n	8001054 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010a0:	f7ff fa64 	bl	800056c <HAL_GetTick>
 80010a4:	1bc0      	subs	r0, r0, r7
 80010a6:	2802      	cmp	r0, #2
 80010a8:	d9f7      	bls.n	800109a <HAL_RCC_OscConfig+0x20a>
 80010aa:	e736      	b.n	8000f1a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d104      	bne.n	80010ba <HAL_RCC_OscConfig+0x22a>
 80010b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010b2:	f043 0304 	orr.w	r3, r3, #4
 80010b6:	672b      	str	r3, [r5, #112]	; 0x70
 80010b8:	e7d0      	b.n	800105c <HAL_RCC_OscConfig+0x1cc>
 80010ba:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80010bc:	f022 0201 	bic.w	r2, r2, #1
 80010c0:	672a      	str	r2, [r5, #112]	; 0x70
 80010c2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80010c4:	f022 0204 	bic.w	r2, r2, #4
 80010c8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1ca      	bne.n	8001064 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80010ce:	f7ff fa4d 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010d2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80010d6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010da:	0798      	lsls	r0, r3, #30
 80010dc:	d5cb      	bpl.n	8001076 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010de:	f7ff fa45 	bl	800056c <HAL_GetTick>
 80010e2:	1bc0      	subs	r0, r0, r7
 80010e4:	4540      	cmp	r0, r8
 80010e6:	d9f7      	bls.n	80010d8 <HAL_RCC_OscConfig+0x248>
 80010e8:	e717      	b.n	8000f1a <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ea:	f7ff fa3f 	bl	800056c <HAL_GetTick>
 80010ee:	1bc0      	subs	r0, r0, r7
 80010f0:	4540      	cmp	r0, r8
 80010f2:	d9bd      	bls.n	8001070 <HAL_RCC_OscConfig+0x1e0>
 80010f4:	e711      	b.n	8000f1a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80010f6:	4d18      	ldr	r5, [pc, #96]	; (8001158 <HAL_RCC_OscConfig+0x2c8>)
 80010f8:	68ab      	ldr	r3, [r5, #8]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d047      	beq.n	8001192 <HAL_RCC_OscConfig+0x302>
 8001102:	4e19      	ldr	r6, [pc, #100]	; (8001168 <HAL_RCC_OscConfig+0x2d8>)
 8001104:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001106:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001108:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800110a:	d135      	bne.n	8001178 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800110c:	f7ff fa2e 	bl	800056c <HAL_GetTick>
 8001110:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001112:	682b      	ldr	r3, [r5, #0]
 8001114:	0199      	lsls	r1, r3, #6
 8001116:	d429      	bmi.n	800116c <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001118:	6a22      	ldr	r2, [r4, #32]
 800111a:	69e3      	ldr	r3, [r4, #28]
 800111c:	4313      	orrs	r3, r2
 800111e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001120:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001124:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001126:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800112a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800112c:	4c0a      	ldr	r4, [pc, #40]	; (8001158 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800112e:	0852      	lsrs	r2, r2, #1
 8001130:	3a01      	subs	r2, #1
 8001132:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001136:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001138:	2301      	movs	r3, #1
 800113a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800113c:	f7ff fa16 	bl	800056c <HAL_GetTick>
 8001140:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001142:	6823      	ldr	r3, [r4, #0]
 8001144:	019a      	lsls	r2, r3, #6
 8001146:	f53f aebb 	bmi.w	8000ec0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800114a:	f7ff fa0f 	bl	800056c <HAL_GetTick>
 800114e:	1b40      	subs	r0, r0, r5
 8001150:	2802      	cmp	r0, #2
 8001152:	d9f6      	bls.n	8001142 <HAL_RCC_OscConfig+0x2b2>
 8001154:	e6e1      	b.n	8000f1a <HAL_RCC_OscConfig+0x8a>
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	42470000 	.word	0x42470000
 8001160:	42470e80 	.word	0x42470e80
 8001164:	40007000 	.word	0x40007000
 8001168:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800116c:	f7ff f9fe 	bl	800056c <HAL_GetTick>
 8001170:	1bc0      	subs	r0, r0, r7
 8001172:	2802      	cmp	r0, #2
 8001174:	d9cd      	bls.n	8001112 <HAL_RCC_OscConfig+0x282>
 8001176:	e6d0      	b.n	8000f1a <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001178:	f7ff f9f8 	bl	800056c <HAL_GetTick>
 800117c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800117e:	682b      	ldr	r3, [r5, #0]
 8001180:	019b      	lsls	r3, r3, #6
 8001182:	f57f ae9d 	bpl.w	8000ec0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001186:	f7ff f9f1 	bl	800056c <HAL_GetTick>
 800118a:	1b00      	subs	r0, r0, r4
 800118c:	2802      	cmp	r0, #2
 800118e:	d9f6      	bls.n	800117e <HAL_RCC_OscConfig+0x2ee>
 8001190:	e6c3      	b.n	8000f1a <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001192:	2801      	cmp	r0, #1
 8001194:	f43f aec2 	beq.w	8000f1c <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8001198:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800119a:	69e3      	ldr	r3, [r4, #28]
 800119c:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 80011a0:	429a      	cmp	r2, r3
 80011a2:	f47f ae79 	bne.w	8000e98 <HAL_RCC_OscConfig+0x8>
 80011a6:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80011a8:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ac:	4293      	cmp	r3, r2
 80011ae:	f47f ae73 	bne.w	8000e98 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80011b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80011b8:	4003      	ands	r3, r0
 80011ba:	4293      	cmp	r3, r2
 80011bc:	f47f ae6c 	bne.w	8000e98 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80011c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80011c2:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80011c6:	4293      	cmp	r3, r2
 80011c8:	f47f ae66 	bne.w	8000e98 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80011cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80011ce:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 80011d2:	1ac0      	subs	r0, r0, r3
 80011d4:	bf18      	it	ne
 80011d6:	2001      	movne	r0, #1
 80011d8:	e6a0      	b.n	8000f1c <HAL_RCC_OscConfig+0x8c>
 80011da:	bf00      	nop

080011dc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011dc:	4913      	ldr	r1, [pc, #76]	; (800122c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80011de:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011e0:	688b      	ldr	r3, [r1, #8]
 80011e2:	f003 030c 	and.w	r3, r3, #12
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d003      	beq.n	80011f2 <HAL_RCC_GetSysClockFreq+0x16>
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d003      	beq.n	80011f6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011ee:	4810      	ldr	r0, [pc, #64]	; (8001230 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80011f0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80011f2:	4810      	ldr	r0, [pc, #64]	; (8001234 <HAL_RCC_GetSysClockFreq+0x58>)
 80011f4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011f6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011f8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011fa:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011fc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001200:	bf14      	ite	ne
 8001202:	480c      	ldrne	r0, [pc, #48]	; (8001234 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001204:	480a      	ldreq	r0, [pc, #40]	; (8001230 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001206:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800120a:	bf18      	it	ne
 800120c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800120e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001212:	fba1 0100 	umull	r0, r1, r1, r0
 8001216:	f7fe ffd7 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <HAL_RCC_GetSysClockFreq+0x50>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001222:	3301      	adds	r3, #1
 8001224:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001226:	fbb0 f0f3 	udiv	r0, r0, r3
 800122a:	bd08      	pop	{r3, pc}
 800122c:	40023800 	.word	0x40023800
 8001230:	00f42400 	.word	0x00f42400
 8001234:	007a1200 	.word	0x007a1200

08001238 <HAL_RCC_ClockConfig>:
{
 8001238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800123c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800123e:	4604      	mov	r4, r0
 8001240:	b910      	cbnz	r0, 8001248 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001242:	2001      	movs	r0, #1
 8001244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001248:	4b44      	ldr	r3, [pc, #272]	; (800135c <HAL_RCC_ClockConfig+0x124>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	f002 020f 	and.w	r2, r2, #15
 8001250:	428a      	cmp	r2, r1
 8001252:	d329      	bcc.n	80012a8 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001254:	6821      	ldr	r1, [r4, #0]
 8001256:	078f      	lsls	r7, r1, #30
 8001258:	d42e      	bmi.n	80012b8 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125a:	07c8      	lsls	r0, r1, #31
 800125c:	d441      	bmi.n	80012e2 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800125e:	4b3f      	ldr	r3, [pc, #252]	; (800135c <HAL_RCC_ClockConfig+0x124>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	f002 020f 	and.w	r2, r2, #15
 8001266:	4295      	cmp	r5, r2
 8001268:	d367      	bcc.n	800133a <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800126a:	6822      	ldr	r2, [r4, #0]
 800126c:	0751      	lsls	r1, r2, #29
 800126e:	d46d      	bmi.n	800134c <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001270:	0713      	lsls	r3, r2, #28
 8001272:	d507      	bpl.n	8001284 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001274:	4a3a      	ldr	r2, [pc, #232]	; (8001360 <HAL_RCC_ClockConfig+0x128>)
 8001276:	6921      	ldr	r1, [r4, #16]
 8001278:	6893      	ldr	r3, [r2, #8]
 800127a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800127e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001282:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001284:	f7ff ffaa 	bl	80011dc <HAL_RCC_GetSysClockFreq>
 8001288:	4b35      	ldr	r3, [pc, #212]	; (8001360 <HAL_RCC_ClockConfig+0x128>)
 800128a:	4a36      	ldr	r2, [pc, #216]	; (8001364 <HAL_RCC_ClockConfig+0x12c>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001292:	5cd3      	ldrb	r3, [r2, r3]
 8001294:	40d8      	lsrs	r0, r3
 8001296:	4b34      	ldr	r3, [pc, #208]	; (8001368 <HAL_RCC_ClockConfig+0x130>)
 8001298:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800129a:	4b34      	ldr	r3, [pc, #208]	; (800136c <HAL_RCC_ClockConfig+0x134>)
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	f7ff f91b 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 80012a2:	2000      	movs	r0, #0
 80012a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a8:	b2ca      	uxtb	r2, r1
 80012aa:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	4299      	cmp	r1, r3
 80012b4:	d1c5      	bne.n	8001242 <HAL_RCC_ClockConfig+0xa>
 80012b6:	e7cd      	b.n	8001254 <HAL_RCC_ClockConfig+0x1c>
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ba:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012be:	bf1e      	ittt	ne
 80012c0:	689a      	ldrne	r2, [r3, #8]
 80012c2:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80012c6:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c8:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012ca:	bf42      	ittt	mi
 80012cc:	689a      	ldrmi	r2, [r3, #8]
 80012ce:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80012d2:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	68a0      	ldr	r0, [r4, #8]
 80012d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80012dc:	4302      	orrs	r2, r0
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	e7bb      	b.n	800125a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e2:	6862      	ldr	r2, [r4, #4]
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <HAL_RCC_ClockConfig+0x128>)
 80012e6:	2a01      	cmp	r2, #1
 80012e8:	d11d      	bne.n	8001326 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f0:	d0a7      	beq.n	8001242 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012f2:	4e1b      	ldr	r6, [pc, #108]	; (8001360 <HAL_RCC_ClockConfig+0x128>)
 80012f4:	68b3      	ldr	r3, [r6, #8]
 80012f6:	f023 0303 	bic.w	r3, r3, #3
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80012fe:	f7ff f935 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001302:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001306:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001308:	68b3      	ldr	r3, [r6, #8]
 800130a:	6862      	ldr	r2, [r4, #4]
 800130c:	f003 030c 	and.w	r3, r3, #12
 8001310:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001314:	d0a3      	beq.n	800125e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001316:	f7ff f929 	bl	800056c <HAL_GetTick>
 800131a:	1bc0      	subs	r0, r0, r7
 800131c:	4540      	cmp	r0, r8
 800131e:	d9f3      	bls.n	8001308 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001320:	2003      	movs	r0, #3
}
 8001322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001326:	1e91      	subs	r1, r2, #2
 8001328:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800132a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800132c:	d802      	bhi.n	8001334 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800132e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001332:	e7dd      	b.n	80012f0 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001334:	f013 0f02 	tst.w	r3, #2
 8001338:	e7da      	b.n	80012f0 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133a:	b2ea      	uxtb	r2, r5
 800133c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 030f 	and.w	r3, r3, #15
 8001344:	429d      	cmp	r5, r3
 8001346:	f47f af7c 	bne.w	8001242 <HAL_RCC_ClockConfig+0xa>
 800134a:	e78e      	b.n	800126a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800134c:	4904      	ldr	r1, [pc, #16]	; (8001360 <HAL_RCC_ClockConfig+0x128>)
 800134e:	68e0      	ldr	r0, [r4, #12]
 8001350:	688b      	ldr	r3, [r1, #8]
 8001352:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001356:	4303      	orrs	r3, r0
 8001358:	608b      	str	r3, [r1, #8]
 800135a:	e789      	b.n	8001270 <HAL_RCC_ClockConfig+0x38>
 800135c:	40023c00 	.word	0x40023c00
 8001360:	40023800 	.word	0x40023800
 8001364:	080017e0 	.word	0x080017e0
 8001368:	2000000c 	.word	0x2000000c
 800136c:	20000004 	.word	0x20000004

08001370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001370:	b570      	push	{r4, r5, r6, lr}
 8001372:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001374:	2230      	movs	r2, #48	; 0x30
 8001376:	2100      	movs	r1, #0
 8001378:	a808      	add	r0, sp, #32
 800137a:	f000 fa1d 	bl	80017b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137e:	2100      	movs	r1, #0
 8001380:	2214      	movs	r2, #20
 8001382:	a803      	add	r0, sp, #12
 8001384:	f000 fa18 	bl	80017b8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001388:	2400      	movs	r4, #0
 800138a:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <SystemClock_Config+0x8c>)
 800138c:	9401      	str	r4, [sp, #4]
 800138e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001390:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001394:	641a      	str	r2, [r3, #64]	; 0x40
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <SystemClock_Config+0x90>)
 80013a2:	9402      	str	r4, [sp, #8]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b2:	9302      	str	r3, [sp, #8]
 80013b4:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ba:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013c0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013c2:	2304      	movs	r3, #4
 80013c4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80013c6:	2332      	movs	r3, #50	; 0x32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c8:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ca:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLN = 50;
 80013cc:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ce:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013d0:	2307      	movs	r3, #7
 80013d2:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013d4:	9608      	str	r6, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d6:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d8:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013da:	f7ff fd59 	bl	8000e90 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013de:	230f      	movs	r3, #15
 80013e0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013e2:	4631      	mov	r1, r6
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013e8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ea:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ec:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ee:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013f0:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013f2:	f7ff ff21 	bl	8001238 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80013f6:	b014      	add	sp, #80	; 0x50
 80013f8:	bd70      	pop	{r4, r5, r6, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40007000 	.word	0x40007000

08001404 <main>:
{
 8001404:	b580      	push	{r7, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	2714      	movs	r7, #20
{
 8001408:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 800140a:	f7ff f889 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 800140e:	f7ff ffaf 	bl	8001370 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	463a      	mov	r2, r7
 8001414:	2100      	movs	r1, #0
 8001416:	a804      	add	r0, sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001418:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	f000 f9cd 	bl	80017b8 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141e:	4b4c      	ldr	r3, [pc, #304]	; (8001550 <main+0x14c>)
 8001420:	9400      	str	r4, [sp, #0]
 8001422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001424:	484b      	ldr	r0, [pc, #300]	; (8001554 <main+0x150>)
  hcan1.Instance = CAN1;
 8001426:	4d4c      	ldr	r5, [pc, #304]	; (8001558 <main+0x154>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001428:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800142c:	631a      	str	r2, [r3, #48]	; 0x30
 800142e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001430:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001434:	9200      	str	r2, [sp, #0]
 8001436:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	9401      	str	r4, [sp, #4]
 800143a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800143c:	f042 0201 	orr.w	r2, r2, #1
 8001440:	631a      	str	r2, [r3, #48]	; 0x30
 8001442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001444:	f002 0201 	and.w	r2, r2, #1
 8001448:	9201      	str	r2, [sp, #4]
 800144a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800144c:	9402      	str	r4, [sp, #8]
 800144e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001450:	f042 0208 	orr.w	r2, r2, #8
 8001454:	631a      	str	r2, [r3, #48]	; 0x30
 8001456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001458:	f002 0208 	and.w	r2, r2, #8
 800145c:	9202      	str	r2, [sp, #8]
 800145e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	9403      	str	r4, [sp, #12]
 8001462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001464:	f042 0202 	orr.w	r2, r2, #2
 8001468:	631a      	str	r2, [r3, #48]	; 0x30
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001470:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001474:	f44f 4170 	mov.w	r1, #61440	; 0xf000

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001478:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800147c:	f7ff fd02 	bl	8000e84 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	a904      	add	r1, sp, #16
 8001482:	4836      	ldr	r0, [pc, #216]	; (800155c <main+0x158>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001484:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001486:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f7ff fc15 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800148e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001492:	a904      	add	r1, sp, #16
 8001494:	482f      	ldr	r0, [pc, #188]	; (8001554 <main+0x150>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001496:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149e:	f7ff fc0b 	bl	8000cb8 <HAL_GPIO_Init>
  hcan1.Instance = CAN1;
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <main+0x15c>)
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80014a4:	60ac      	str	r4, [r5, #8]
  hcan1.Init.Prescaler = 20;
 80014a6:	e885 0088 	stmia.w	r5, {r3, r7}
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014aa:	4628      	mov	r0, r5
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80014ac:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 80014b0:	612b      	str	r3, [r5, #16]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014b2:	60ec      	str	r4, [r5, #12]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80014b4:	616c      	str	r4, [r5, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80014b6:	762c      	strb	r4, [r5, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80014b8:	766c      	strb	r4, [r5, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80014ba:	76ac      	strb	r4, [r5, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80014bc:	76ec      	strb	r4, [r5, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80014be:	772c      	strb	r4, [r5, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80014c0:	776c      	strb	r4, [r5, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014c2:	f7ff f86d 	bl	80005a0 <HAL_CAN_Init>
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80014c6:	a904      	add	r1, sp, #16
  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 80014c8:	960b      	str	r6, [sp, #44]	; 0x2c
  sFilterConfig.FilterActivation=ENABLE;
 80014ca:	960c      	str	r6, [sp, #48]	; 0x30
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80014cc:	4628      	mov	r0, r5
  sFilterConfig.SlaveStartFilterBank = 14;
 80014ce:	260e      	movs	r6, #14
  sFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0; //set fifo assignment
 80014d0:	9408      	str	r4, [sp, #32]
  sFilterConfig.FilterIdHigh = 0x0000;
 80014d2:	9404      	str	r4, [sp, #16]
  sFilterConfig.FilterIdLow = 0x0000;
 80014d4:	9405      	str	r4, [sp, #20]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80014d6:	9406      	str	r4, [sp, #24]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80014d8:	9407      	str	r4, [sp, #28]
  sFilterConfig.FilterBank = 0;
 80014da:	9409      	str	r4, [sp, #36]	; 0x24
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80014dc:	940a      	str	r4, [sp, #40]	; 0x28
  sFilterConfig.SlaveStartFilterBank = 14;
 80014de:	960d      	str	r6, [sp, #52]	; 0x34
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80014e0:	f7ff f8da 	bl	8000698 <HAL_CAN_ConfigFilter>
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80014e4:	4628      	mov	r0, r5
 80014e6:	f7ff f95f 	bl	80007a8 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING| CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_OVERRUN) != HAL_OK) {
 80014ea:	4631      	mov	r1, r6
 80014ec:	4628      	mov	r0, r5
 80014ee:	f7ff fa5d 	bl	80009ac <HAL_CAN_ActivateNotification>
  TxHeader.StdId = OwnID;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <main+0x160>)
 80014f4:	4a1c      	ldr	r2, [pc, #112]	; (8001568 <main+0x164>)
  TxHeader.IDE = CAN_ID_STD;
 80014f6:	609c      	str	r4, [r3, #8]
  TxHeader.StdId = OwnID;
 80014f8:	8812      	ldrh	r2, [r2, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 80014fa:	60dc      	str	r4, [r3, #12]
  TxHeader.TransmitGlobalTime = DISABLE;
 80014fc:	751c      	strb	r4, [r3, #20]
	  	if(myLEDVar == 4) myLEDVar=0;
 80014fe:	4c1b      	ldr	r4, [pc, #108]	; (800156c <main+0x168>)
  TxHeader.StdId = OwnID;
 8001500:	601a      	str	r2, [r3, #0]
  TxHeader.DLC = 2;
 8001502:	2202      	movs	r2, #2
 8001504:	611a      	str	r2, [r3, #16]
 8001506:	4626      	mov	r6, r4
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8001508:	4f14      	ldr	r7, [pc, #80]	; (800155c <main+0x158>)
 800150a:	2101      	movs	r1, #1
 800150c:	4638      	mov	r0, r7
 800150e:	f7ff fcb3 	bl	8000e78 <HAL_GPIO_ReadPin>
 8001512:	2801      	cmp	r0, #1
 8001514:	d1f9      	bne.n	800150a <main+0x106>
	  	if(myLEDVar == 4) myLEDVar=0;
 8001516:	7823      	ldrb	r3, [r4, #0]
	  	TxData[0] = myLEDVar;
 8001518:	4a15      	ldr	r2, [pc, #84]	; (8001570 <main+0x16c>)
	  	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800151a:	4912      	ldr	r1, [pc, #72]	; (8001564 <main+0x160>)
	  	if(myLEDVar == 4) myLEDVar=0;
 800151c:	2b04      	cmp	r3, #4
 800151e:	bf04      	itt	eq
 8001520:	2300      	moveq	r3, #0
 8001522:	7023      	strbeq	r3, [r4, #0]
	  	++myLEDVar;
 8001524:	7833      	ldrb	r3, [r6, #0]
 8001526:	3301      	adds	r3, #1
 8001528:	b2db      	uxtb	r3, r3
 800152a:	7033      	strb	r3, [r6, #0]
	  	TxData[0] = myLEDVar;
 800152c:	7013      	strb	r3, [r2, #0]
	  	TxData[1] = 0x12;
 800152e:	2312      	movs	r3, #18
 8001530:	7053      	strb	r3, [r2, #1]
	  	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001532:	4628      	mov	r0, r5
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <main+0x170>)
 8001536:	f7ff f962 	bl	80007fe <HAL_CAN_AddTxMessage>
	  	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {}
 800153a:	4628      	mov	r0, r5
 800153c:	f7ff f9ac 	bl	8000898 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001540:	2803      	cmp	r0, #3
 8001542:	d1fa      	bne.n	800153a <main+0x136>
	  	HAL_Delay(500);
 8001544:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001548:	f7ff f816 	bl	8000578 <HAL_Delay>
 800154c:	e7dc      	b.n	8001508 <main+0x104>
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800
 8001554:	40020c00 	.word	0x40020c00
 8001558:	2000007c 	.word	0x2000007c
 800155c:	40020000 	.word	0x40020000
 8001560:	40006400 	.word	0x40006400
 8001564:	20000048 	.word	0x20000048
 8001568:	20000008 	.word	0x20000008
 800156c:	20000060 	.word	0x20000060
 8001570:	20000068 	.word	0x20000068
 8001574:	20000070 	.word	0x20000070

08001578 <LED_Switch>:
}

/* USER CODE BEGIN 4 */

void LED_Switch(uint8_t led)
{
 8001578:	b510      	push	{r4, lr}

	/* Turn off all LEDs */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
{
 800157c:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800157e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001582:	4818      	ldr	r0, [pc, #96]	; (80015e4 <LED_Switch+0x6c>)
 8001584:	f7ff fc7e 	bl	8000e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800158e:	4815      	ldr	r0, [pc, #84]	; (80015e4 <LED_Switch+0x6c>)
 8001590:	f7ff fc78 	bl	8000e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800159a:	4812      	ldr	r0, [pc, #72]	; (80015e4 <LED_Switch+0x6c>)
 800159c:	f7ff fc72 	bl	8000e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80015a0:	4810      	ldr	r0, [pc, #64]	; (80015e4 <LED_Switch+0x6c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a8:	f7ff fc6c 	bl	8000e84 <HAL_GPIO_WritePin>

	switch(led)
 80015ac:	1e60      	subs	r0, r4, #1
 80015ae:	2803      	cmp	r0, #3
 80015b0:	d817      	bhi.n	80015e2 <LED_Switch+0x6a>
 80015b2:	e8df f000 	tbb	[pc, r0]
 80015b6:	0a02      	.short	0x0a02
 80015b8:	120e      	.short	0x120e
	{
    	case(1):
		{
    		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    		  break;
		}

    	case(4):
		{
    		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80015c0:	4808      	ldr	r0, [pc, #32]	; (80015e4 <LED_Switch+0x6c>)
		}

    	default:
    		break;
	}
}
 80015c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80015c6:	f7ff bc5d 	b.w	8000e84 <HAL_GPIO_WritePin>
    		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d0:	e7f6      	b.n	80015c0 <LED_Switch+0x48>
    		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80015d2:	2201      	movs	r2, #1
 80015d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015d8:	e7f2      	b.n	80015c0 <LED_Switch+0x48>
    		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015e0:	e7ee      	b.n	80015c0 <LED_Switch+0x48>
 80015e2:	bd10      	pop	{r4, pc}
 80015e4:	40020c00 	.word	0x40020c00

080015e8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80015e8:	b538      	push	{r3, r4, r5, lr}
	/* Get RX message */
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80015ea:	4d0a      	ldr	r5, [pc, #40]	; (8001614 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80015ec:	4c0a      	ldr	r4, [pc, #40]	; (8001618 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80015ee:	462a      	mov	r2, r5
 80015f0:	4623      	mov	r3, r4
 80015f2:	2100      	movs	r1, #0
 80015f4:	f7ff f964 	bl	80008c0 <HAL_CAN_GetRxMessage>
	{
	  /* Reception Error */
	  Error_Handler();
	}

	if(RxHeader.StdId == RemoteID)
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80015fa:	682a      	ldr	r2, [r5, #0]
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d106      	bne.n	8001610 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	{
		myLEDVar = RxData[0];
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001604:	7820      	ldrb	r0, [r4, #0]
 8001606:	7018      	strb	r0, [r3, #0]
		LED_Switch(myLEDVar);
	}
}
 8001608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LED_Switch(myLEDVar);
 800160c:	f7ff bfb4 	b.w	8001578 <LED_Switch>
 8001610:	bd38      	pop	{r3, r4, r5, pc}
 8001612:	bf00      	nop
 8001614:	2000002c 	.word	0x2000002c
 8001618:	20000074 	.word	0x20000074
 800161c:	2000000a 	.word	0x2000000a
 8001620:	20000060 	.word	0x20000060

08001624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001624:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_MspInit+0x3c>)
 8001628:	2100      	movs	r1, #0
 800162a:	9100      	str	r1, [sp, #0]
 800162c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800162e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001632:	645a      	str	r2, [r3, #68]	; 0x44
 8001634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001636:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800163a:	9200      	str	r2, [sp, #0]
 800163c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	9101      	str	r1, [sp, #4]
 8001640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001642:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001646:	641a      	str	r2, [r3, #64]	; 0x40
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001650:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001654:	f7ff fac6 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001658:	b003      	add	sp, #12
 800165a:	f85d fb04 	ldr.w	pc, [sp], #4
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800

08001664 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001664:	b510      	push	{r4, lr}
 8001666:	4604      	mov	r4, r0
 8001668:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166a:	2214      	movs	r2, #20
 800166c:	2100      	movs	r1, #0
 800166e:	a803      	add	r0, sp, #12
 8001670:	f000 f8a2 	bl	80017b8 <memset>
  if(hcan->Instance==CAN1)
 8001674:	6822      	ldr	r2, [r4, #0]
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <HAL_CAN_MspInit+0x74>)
 8001678:	429a      	cmp	r2, r3
 800167a:	d12b      	bne.n	80016d4 <HAL_CAN_MspInit+0x70>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800167c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8001680:	2400      	movs	r4, #0
 8001682:	9401      	str	r4, [sp, #4]
 8001684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001686:	4815      	ldr	r0, [pc, #84]	; (80016dc <HAL_CAN_MspInit+0x78>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001688:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
 800168e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001690:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001694:	9201      	str	r2, [sp, #4]
 8001696:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001698:	9402      	str	r4, [sp, #8]
 800169a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800169c:	f042 0202 	orr.w	r2, r2, #2
 80016a0:	631a      	str	r2, [r3, #48]	; 0x30
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	9302      	str	r3, [sp, #8]
 80016aa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016b0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ba:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016bc:	2309      	movs	r3, #9
 80016be:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	f7ff fafa 	bl	8000cb8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80016c4:	2014      	movs	r0, #20
 80016c6:	4622      	mov	r2, r4
 80016c8:	4621      	mov	r1, r4
 80016ca:	f7ff fa9d 	bl	8000c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80016ce:	2014      	movs	r0, #20
 80016d0:	f7ff face 	bl	8000c70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80016d4:	b008      	add	sp, #32
 80016d6:	bd10      	pop	{r4, pc}
 80016d8:	40006400 	.word	0x40006400
 80016dc:	40020400 	.word	0x40020400

080016e0 <NMI_Handler>:
 80016e0:	4770      	bx	lr

080016e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e2:	e7fe      	b.n	80016e2 <HardFault_Handler>

080016e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e4:	e7fe      	b.n	80016e4 <MemManage_Handler>

080016e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e6:	e7fe      	b.n	80016e6 <BusFault_Handler>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	e7fe      	b.n	80016e8 <UsageFault_Handler>

080016ea <SVC_Handler>:
 80016ea:	4770      	bx	lr

080016ec <DebugMon_Handler>:
 80016ec:	4770      	bx	lr

080016ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ee:	4770      	bx	lr

080016f0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f0:	f7fe bf30 	b.w	8000554 <HAL_IncTick>

080016f4 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016f4:	4801      	ldr	r0, [pc, #4]	; (80016fc <CAN1_RX0_IRQHandler+0x8>)
 80016f6:	f7ff b976 	b.w	80009e6 <HAL_CAN_IRQHandler>
 80016fa:	bf00      	nop
 80016fc:	2000007c 	.word	0x2000007c

08001700 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <SystemInit+0x18>)
 8001702:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001706:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800170a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800170e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800171c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001754 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001720:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001722:	e003      	b.n	800172c <LoopCopyDataInit>

08001724 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001726:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001728:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800172a:	3104      	adds	r1, #4

0800172c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800172c:	480b      	ldr	r0, [pc, #44]	; (800175c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001730:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001732:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001734:	d3f6      	bcc.n	8001724 <CopyDataInit>
  ldr  r2, =_sbss
 8001736:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001738:	e002      	b.n	8001740 <LoopFillZerobss>

0800173a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800173a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800173c:	f842 3b04 	str.w	r3, [r2], #4

08001740 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001742:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001744:	d3f9      	bcc.n	800173a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001746:	f7ff ffdb 	bl	8001700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800174a:	f000 f811 	bl	8001770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174e:	f7ff fe59 	bl	8001404 <main>
  bx  lr    
 8001752:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001754:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001758:	08001800 	.word	0x08001800
  ldr  r0, =_sdata
 800175c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001760:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001764:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001768:	200000a4 	.word	0x200000a4

0800176c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800176c:	e7fe      	b.n	800176c <ADC_IRQHandler>
	...

08001770 <__libc_init_array>:
 8001770:	b570      	push	{r4, r5, r6, lr}
 8001772:	4e0d      	ldr	r6, [pc, #52]	; (80017a8 <__libc_init_array+0x38>)
 8001774:	4c0d      	ldr	r4, [pc, #52]	; (80017ac <__libc_init_array+0x3c>)
 8001776:	1ba4      	subs	r4, r4, r6
 8001778:	10a4      	asrs	r4, r4, #2
 800177a:	2500      	movs	r5, #0
 800177c:	42a5      	cmp	r5, r4
 800177e:	d109      	bne.n	8001794 <__libc_init_array+0x24>
 8001780:	4e0b      	ldr	r6, [pc, #44]	; (80017b0 <__libc_init_array+0x40>)
 8001782:	4c0c      	ldr	r4, [pc, #48]	; (80017b4 <__libc_init_array+0x44>)
 8001784:	f000 f820 	bl	80017c8 <_init>
 8001788:	1ba4      	subs	r4, r4, r6
 800178a:	10a4      	asrs	r4, r4, #2
 800178c:	2500      	movs	r5, #0
 800178e:	42a5      	cmp	r5, r4
 8001790:	d105      	bne.n	800179e <__libc_init_array+0x2e>
 8001792:	bd70      	pop	{r4, r5, r6, pc}
 8001794:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001798:	4798      	blx	r3
 800179a:	3501      	adds	r5, #1
 800179c:	e7ee      	b.n	800177c <__libc_init_array+0xc>
 800179e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017a2:	4798      	blx	r3
 80017a4:	3501      	adds	r5, #1
 80017a6:	e7f2      	b.n	800178e <__libc_init_array+0x1e>
 80017a8:	080017f8 	.word	0x080017f8
 80017ac:	080017f8 	.word	0x080017f8
 80017b0:	080017f8 	.word	0x080017f8
 80017b4:	080017fc 	.word	0x080017fc

080017b8 <memset>:
 80017b8:	4402      	add	r2, r0
 80017ba:	4603      	mov	r3, r0
 80017bc:	4293      	cmp	r3, r2
 80017be:	d100      	bne.n	80017c2 <memset+0xa>
 80017c0:	4770      	bx	lr
 80017c2:	f803 1b01 	strb.w	r1, [r3], #1
 80017c6:	e7f9      	b.n	80017bc <memset+0x4>

080017c8 <_init>:
 80017c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ca:	bf00      	nop
 80017cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ce:	bc08      	pop	{r3}
 80017d0:	469e      	mov	lr, r3
 80017d2:	4770      	bx	lr

080017d4 <_fini>:
 80017d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d6:	bf00      	nop
 80017d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017da:	bc08      	pop	{r3}
 80017dc:	469e      	mov	lr, r3
 80017de:	4770      	bx	lr
